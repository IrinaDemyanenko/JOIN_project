"""
Django settings for join project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-6$#9h9#42h$w)@9paq0$rsw^nuxr6rv&qt=ezwzt4hm6!+(u*m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'testserver',
    '127.0.0.1',
    'localhost',
    '[::1]',
    'Aniri.pythonanywhere.com',
    'www.Aniri.pythonanywhere.com'
]

INTERNAL_IPS = [
    "127.0.0.1",
]


# Application definition

INSTALLED_APPS = [
    'about.apps.AboutConfig',
    'core.apps.CoreConfig',
    'users.apps.UsersConfig',
    'posts.apps.PostsConfig',
    'django.contrib.admin',
    'django.contrib.auth',  # Приложение для регистрация и авторизация пользователей
    'django.contrib.contenttypes',  # Django контент-типовая система (даёт разрешения, связанные с моделями).
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',  # # Приложение staticfiles необходимо для работы приложения DjDT
    'sorl.thumbnail', # приложение для создвния миниатюр, к нему установили библиотеку pillow
    'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # Управление сессиями между запросами
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Связывает пользователей, использующих сессии, запросами.
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Добавьте новое приложения для обработки запросов DjDT
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'join.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                # добавляет в контекст шаблона объект user, он может быть двух типов: AnonymousUser, либо экземпляром модели User
                # Но самое важное — у этого объекта есть свойство is_authenticated; это свойство принимает значение True, если пользователь авторизован.
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.year.year',
                # Найди в корне проекта папку core/, в ней - папку context_processors/,
                # там - файл year.py, а в этом файле - функцию year().
                # Словарь, который она возвращает, добавь на все страницы проекта.
            ],
        },
    },
]

WSGI_APPLICATION = 'join.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
    "/var/www/static/",  #этот параметр пока не нужен при выгрузке на сервер,
    # если папка static будет находиться на это сервере
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'users:login'
# Это адрес, на который Django будет перенаправлять пользователей
# для авторизации. Это особенно важно при использовании декоратора
# @login_required, о котором вы узнаете в следующих уроках (интрига).
# Значение по умолчанию: '/accounts/login/'

LOGIN_REDIRECT_URL = 'posts:index'
# Здесь указывается, куда перенаправить пользователя после успешной
# авторизации.
# Значение по умолчанию: '/accounts/profile/'

#LOGOUT_REDIRECT_URL = 'posts:index'
# Значение по умолчанию: '/auth/logout/'
# Адрес, на который будет направлен пользователь после выхода из системы.
# Можно оставить штатный, а можно раскомментировать строку
# LOGOUT_REDIRECT_URL = 'posts:index' — и при выходе из аккаунта
# пользователи будут перенаправляться на главную страницу проекта.

EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'

EMAIL_FILE_PATH = 'sent_emails'

CSRF_FAILURE_VIEW = 'core.views.csrf_failure'

# это URL, по которому пользователи могут получить доступ к медиафайлам.
MEDIA_URL = '/media/'
# Абсолютный путь к директории, из которой ваше приложение Django
# будет загружать медиафайлы.
MEDIA_ROOT = BASE_DIR / 'media'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        # для разработки, для боевого сервера Memcached или Redis
    }
}

